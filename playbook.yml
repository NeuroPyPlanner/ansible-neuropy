---
- hosts: us-east-2
  remote_user: ubuntu
  vars_files:
    - external_vars.yml
  vars:
    env:
      SECRET_KEY: '{{secret_key }}'
      DATABASE_NAME: '{{ database_name }}'
      DATABASE_USER: "{{ database_user }}"
      DATABASE_PASSWORD: "{{database_password }}"
      DATABASE_HOST: "{{ database_host }}"
      DATABASE_PORT: "{{ database_port }}"
      AWS_HOST: "{{ aws_host }}"
      AWS_HOST_IP: "{{ aws_host_ip }}"
      EMAIL_PASSWORD: "{{ email_password }}"
      GOOGLE_CLIENT_ID: "{{ google_client_id }}"
      GOOGLE_CLIENT_SECRET: "{{ google_client_secret }}"
  tasks:
    - name: Update Ubuntu with all the lastest stuff
      apt: update_cache=yes
      become: yes
      become_method: sudo

    - name: Upgrade Ubuntu with all the lastest stuff
      apt: upgrade=yes
      become: yes
      become_method: sudo

    - name: Install Basic Unix-level Services
      apt: name={{ item }} state=latest
      become: yes
      become_method: sudo
      with_items:
        - nginx
        - python3
        - python3-pip
        - python3.4-venv
        - git
        - gunicorn
        - libtiff5-dev
        - libjpeg8-dev
        - zlib1g-dev
        - libfreetype6-dev
        - liblcms2-dev
        - libwebp-dev
        - tcl8.6-dev
        - tk8.6-dev
        - python-tk
        - python-dev
        - libpq-dev

    - name: Clone the {{ app_name }} App to the Home Directory
      git: clone=yes repo={{ git_repo_url }} dest={{ app_root }} version=deployment

    - name: Create a virtual environment in the {{ app_name }} app repo
      command: python3 -m venv {{ environment_location }}

    - name: Install gunicorn to the virtualenv
      pip: virtualenv={{ environment_location }} name=gunicorn

    - name: Install the packages specified in requirements.pip in the Python 3 environment
      pip: virtualenv={{ environment_location }} requirements={{ app_root }}/requirements.pip

    - name: Migrate Django models to database
      django_manage:
        command: migrate
        app_path: "/home/ubuntu/NeuroPy/neuropy/"
        virtualenv: "{{ environment_location }}"
      environment: "{{ env }}"

    - name: Register the old default file
      stat: path=/etc/nginx/sites-available/default.old
      register: default_stat

    - name: Rename old default file if a copy doesn't already exist
      command: mv /etc/nginx/sites-available/default /etc/nginx/sites-available/default.old
      when: default_stat.stat.exists

    - name: Create a new default file for nginx
      template: src={{ template_path }}/nginx_config.jinja2 dest=/etc/nginx/sites-available/default
      become: yes
      become_method: sudo

    - name: Restart nginx service
      service: name=nginx state=restarted
      become: yes
      become_method: sudo

    - name: Copy upstart script into /etc/init
      template: src={{ template_path }}/upstart_config dest=/etc/init/{{ app_name }}.conf
      become: yes
      become_method: sudo

    - name: Restart the {{ app_name }} upstart job
      service: name={{ app_name }} state=restarted
      become: yes
      become_method: sudo